version: "3.8"

services:

    # PHP Service
    php:
        build:
            context: .
            target: php
            args:
                - APP_ENV=${APP_ENV}
        environment:
            - APP_ENV=${APP_ENV}
            - CONTAINER_ROLE=app
        working_dir: /var/www
        volumes:
            - ./:/var/www
        ports:
            - 8000:8000
        depends_on:
            - database
            - redis
        restart: unless-stopped

    # WebSocket Service
    websocket:
        build:
            context: .
            target: php
            args:
                - APP_ENV=${APP_ENV}
        environment:
            - APP_ENV=${APP_ENV}
            - CONTAINER_ROLE=websocket
        working_dir: /var/www
        volumes:
            - ./:/var/www
        ports:
            - 6001:6001
        depends_on:
            - database
            - redis
        restart: unless-stopped

    # Database Server
    database:
        image: mysql:8.0
        ports:
            - 3306:3306
        environment:
            - MYSQL_DATABASE=${DB_DATABASE}
            - MYSQL_USER=${DB_USERNAME}
            - MYSQL_PASSWORD=${DB_PASSWORD}
            - MYSQL_ROOT_PASSWORD=""
            - MYSQL_ALLOW_EMPTY_PASSWORD="yes"
        volumes:
            - db-data:/var/lib/mysql
        restart: unless-stopped

    # Redis Server
    redis:
        image: redis:alpine
        command: redis-server --appendonly yes --requirepass $REDIS_PASSWORD
        ports:
            - 6379:6379
        restart: unless-stopped

    # Queue Server
    queue:
        build:
            context: .
            target: php
            args:
                - APP_ENV=${APP_ENV}
        environment:
            - APP_ENV=${APP_ENV}
            - CONTAINER_ROLE=queue
        working_dir: /var/www
        volumes:
            - ./:/var/www
        restart: unless-stopped

    # Node Server
    node:
        build:
            context: .
            target: node
        volumes:
            - .:/usr/src
            - /usr/src/node_modules
        tty: true
        restart: unless-stopped

volumes:
    db-data:
